import React, { useState } from 'react';
import {
  Box,
  Button,
  FormControl,
  FormLabel,
  Input,
  VStack,
  useToast,
  Heading,
  Text,
  Link,
} from '@chakra-ui/react';
import { useNavigate, Link as RouterLink } from 'react-router-dom';
import axios from 'axios';

const Register = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    adminCode: '',
  });
  const toast = useToast();
  const navigate = useNavigate();

  // Handle input changes
  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post(
        '/api/auth/register', // Proxied to http://localhost:4000/api/auth/register
        {
          name: formData.name,
          email: formData.email,
          password: formData.password,
          adminCode: formData.adminCode || undefined, // Send adminCode only if provided
        },
        { withCredentials: true } // Required for cookie-based auth
      );

      if (response.data.success) {
        toast({
          title: 'Registration Successful',
          description: response.data.isAdmin
            ? 'Registered as Admin'
            : 'Registered as Customer. Please verify your email.',
          status: 'success',
          duration: 3000,
          isClosable: true,
        });
        navigate('/verify-email'); // Redirect to email verification page
      } else {
        toast({
          title: 'Registration Failed',
          description: response.data.message || 'Something went wrong',
          status: 'error',
          duration: 3000,
          isClosable: true,
        });
      }
    } catch (error) {
      toast({
        title: 'Error',
        description: error.response?.data?.message || 'Something went wrong',
        status: 'error',
        duration: 3000,
        isClosable: true,
      });
    }
  };

  return (
    <Box
      minH="100vh"
      display="flex"
      alignItems="center"
      justifyContent="center"
      bgGradient="linear(to-r, purple.900, gray.50)"
      p={4}
    >
      <Box
        maxW="md"
        w="full"
        bg="white"
        p={8}
        borderRadius="lg"
        boxShadow="lg"
        mt={{ base: '70px', md: 0 }} // Offset for fixed navbar on mobile
      >
        <VStack spacing={6} align="stretch">
          <Heading as="h1" size="xl" textAlign="center" color="purple.600" fontFamily="'Playfair Display', serif">
            Sign Up for Glamist
          </Heading>
          <Text textAlign="center" color="gray.600" fontFamily="'Montserrat', sans-serif">
            Create your account to get started with Glamist Beauty.
          </Text>
          <form onSubmit={handleSubmit}>
            <VStack spacing={4}>
              <FormControl id="name" isRequired>
                <FormLabel fontFamily="'Montserrat', sans-serif">Name</FormLabel>
                <Input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleChange}
                  placeholder="Enter your name"
                  focusBorderColor="purple.500"
                  borderRadius="md"
                />
              </FormControl>
              <FormControl id="email" isRequired>
                <FormLabel fontFamily="'Montserrat', sans-serif">Email</FormLabel>
                <Input
                  type="email"
                  name="email"
                  value={formData.email}
                  onChange={handleChange}
                  placeholder="Enter your email"
                  focusBorderColor="purple.500"
                  borderRadius="md"
                />
              </FormControl>
              <FormControl id="password" isRequired>
                <FormLabel fontFamily="'Montserrat', sans-serif">Password</FormLabel>
                <Input
                  type="password"
                  name="password"
                  value={formData.password}
                  onChange={handleChange}
                  placeholder="Enter your password"
                  focusBorderColor="purple.500"
                  borderRadius="md"
                />
              </FormControl>
              <FormControl id="adminCode">
                <FormLabel fontFamily="'Montserrat', sans-serif">Admin Code (Optional)</FormLabel>
                <Input
                  type="text"
                  name="adminCode"
                  value={formData.adminCode}
                  onChange={handleChange}
                  placeholder="Enter admin code if applicable"
                  focusBorderColor="purple.500"
                  borderRadius="md"
                />
              </FormControl>
              <Button
                type="submit"
                colorScheme="purple"
                size="lg"
                w="full"
                borderRadius="full"
                _hover={{ bg: 'purple.700', transform: 'scale(1.05)' }}
                fontFamily="'Montserrat', sans-serif"
              >
                Sign Up
              </Button>
            </VStack>
          </form>
          <Text textAlign="center" fontFamily="'Montserrat', sans-serif">
            Already have an account?{' '}
            <Link as={RouterLink} to="/login" color="purple.500" _hover={{ textDecoration: 'underline' }}>
              Log in
            </Link>
          </Text>
        </VStack>
      </Box>
    </Box>
  );
};

export default Register;